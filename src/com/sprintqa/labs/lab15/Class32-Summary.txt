--------------------------------------------------------------------------------------------------------
                                      Topics: Exception Handling
                                             Summary Points
----------------------------------------------------------------------------------------------------------
                                              Exceptions
----------------------------------------------------------------------------------------------------------
- An exception is an unexpected event that occurs during program execution. It affects the flow of the
  program instructions which can cause the program to terminate abnormally.

- An exception can occur for many reasons. Some of them are:
  Invalid user input
  Device failure
  Loss of network connection
  Physical limitations (out of disk memory)
  Code errors
  Opening an unavailable file

- Exceptions can be caught and handled by the program.

- When an exception occurs within a method, it creates an object. This object is called the exception object.

- It contains information about the exception such as the name and description of the exception and state
  of the program when the exception occurred.
----------------------------------------------------------------------------------------------------------
                                              Exception Types
----------------------------------------------------------------------------------------------------------
- RuntimeException
  A runtime exception happens due to a programming error. They are also known as unchecked exceptions.

  These exceptions are not checked at compile-time but run-time. Some of the common runtime exceptions are:
  Improper use of an API - IllegalArgumentException
  Null pointer access (missing the initialization of a variable) - NullPointerException
  Out-of-bounds array access - ArrayIndexOutOfBoundsException
  Dividing a number by 0 - ArithmeticException

  You can think about it in this way. “If it is a runtime exception, it is your fault”.

- IOException
  An IOException is also known as a checked exception. They are checked by the compiler at the compile-time
  and the programmer is prompted to handle these exceptions.
  Some of the examples of checked exceptions are:
  Trying to open a file that doesn’t exist results in FileNotFoundException
  Trying to read past the end of a file
----------------------------------------------------------------------------------------------------------
                                              Exception Handling
----------------------------------------------------------------------------------------------------------
- In Java, we use the exception handler components try, catch and finally blocks to handle exceptions.

- To catch and handle an exception, we place the try...catch...finally block around the code that might
  generate an exception. The finally block is optional. However, if defined, it is always executed
  (even if the exception doesn't occur).

- Syntax:
  try {
    // code
  } catch (ExceptionType e) {
    // catch block
  } finally {
    // finally block
  }

- The code that might generate an exception is placed in the try block.

- Every try block should be immediately followed by the catch or finally block. When an exception occurs,
  it is caught by the catch block that immediately follows it.
  catch blocks cannot be used alone and must always be preceded by a try block.
