--------------------------------------------------------------------------------------------------------
                           Topics: Collections Framework, String Manipulation
                                             Summary Points
----------------------------------------------------------------------------------------------------------
                                             Map Interface
----------------------------------------------------------------------------------------------------------
- The Map interface of the Java collections framework provides the functionality of the map data structure.
- In Java, elements of Map are stored in key/value pairs. Keys are unique values associated with individual
  Values.
- A map cannot contain duplicate keys. And, each key is associated with a single value.
- We can access and modify values using the keys associated with them.
- The Map interface maintains 3 different sets:
  the set of keys
  the set of values
  the set of key/value associations (mapping).
- An example for this would be a list of bank transactions where each Map entry has a unique transaction ID
  serving as the key and the value would be the actual transaction object.
- Since Map is an interface, we cannot create objects from it.
- In order to use functionalities of the Map interface, we can use these classes:
  HashMap, EnumMap, LinkedHashMap, WeakHashMap, TreeMap
----------------------------------------------------------------------------------------------------------
                                             Methods of Map
----------------------------------------------------------------------------------------------------------
- put(K, V) - Inserts the association of a key K and a value V into the map.
  If the key is already present, the new value replaces the old value.
- putAll() - Inserts all the entries from the specified map to this map.
- putIfAbsent(K, V) - Inserts the association if the key K is not already associated with the value V.
- get(K) - Returns the value associated with the specified key K. If the key is not found, it returns null.
- getOrDefault(K, defaultValue) - Returns the value associated with the specified key K.
  If the key is not found, it returns the defaultValue.
- containsKey(K) - Checks if the specified key K is present in the map or not.
- containsValue(V) - Checks if the specified value V is present in the map or not.
- replace(K, V) - Replace the value of the key K with the new specified value V.
- replace(K, oldValue, newValue) - Replaces the value of the key K with the new value newValue only if
  the key K is associated with the value oldValue.
- remove(K) - Removes the entry from the map represented by the key K.
- remove(K, V) - Removes the entry from the map that has key K associated with value V.
- keySet() - Returns a set of all the keys present in a map.
- values() - Returns a set of all the values present in a map.
- entrySet() - Returns a set of all the key/value mapping present in a map.
----------------------------------------------------------------------------------------------------------
                                    String vs StringBuilder vs StringBuffer
----------------------------------------------------------------------------------------------------------
The differences between String, StringBuffer, and StringBuilder are based on the following two parameters:

 - Mutability
   Strings cannot be changed when you use the String class; whereas Strings can change if you use the
   StringBuffer and StringBuilder class.
 - Performance
   StringBuilder is faster than StringBuffer as it offers no synchronization. This is because no extra
   overhead needs to be added to the system and also does not slows down the processing.
--------------------------------------------------------------------------------------
Parameter   | String	         | StringBuffer	            | StringBuilder
--------------------------------------------------------------------------------------
Storage	    | String Pool	     | Heap	                    | Heap
Mutability  |	Immutable	     | Mutable	                | Mutable
Thread Safe |Not used in a       | Used in a multi-threaded | Used in a single-threaded
             threaded environment  environment                environment
Performance |	Slow	         | Slower than StringBuilder | Faster than StringBuffer
                                   but faster than String
--------------------------------------------------------------------------------------
